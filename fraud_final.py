# -*- coding: utf-8 -*-
"""Fraud_Final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qo0Eb0wqYLFAeu31onOqxCG_G626OLed
"""

# Install required packages
!pip install pandas numpy scikit-learn geopy folium tqdm

import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from datetime import datetime
import warnings
import zipfile
import os
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import folium
import time
from tqdm import tqdm
from sklearn.metrics import confusion_matrix, classification_report, precision_recall_curve, auc
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings('ignore')
import folium
from folium import plugins



import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from datetime import datetime
import warnings
import zipfile
import os
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import folium
import time
from tqdm import tqdm
from sklearn.metrics import confusion_matrix, classification_report, precision_recall_curve, auc
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings('ignore')

# US State coordinates mapping
US_STATE_COORDS = {
    'AL': (32.7794, -86.8287), 'AK': (64.0685, -152.2782),
    'AZ': (34.2744, -111.6602), 'AR': (34.8938, -92.4426),
    'CA': (37.1841, -119.4696), 'CO': (38.9972, -105.5478),
    'CT': (41.6219, -72.7273), 'DE': (38.9896, -75.5050),
    'FL': (28.6305, -82.4497), 'GA': (32.6415, -83.4426),
    'HI': (20.2927, -156.3737), 'ID': (44.3509, -114.6130),
    'IL': (40.0417, -89.1965), 'IN': (39.8942, -86.2816),
    'IA': (42.0751, -93.4960), 'KS': (38.4937, -98.3804),
    'KY': (37.5347, -85.3021), 'LA': (31.0689, -91.9968),
    'ME': (45.3695, -69.2428), 'MD': (39.0550, -76.7909),
    'MA': (42.2596, -71.8083), 'MI': (44.3467, -85.4102),
    'MN': (46.2807, -94.3053), 'MS': (32.7364, -89.6678),
    'MO': (38.3566, -92.4580), 'MT': (47.0527, -109.6333),
    'NE': (41.5378, -99.7951), 'NV': (39.3289, -116.6312),
    'NH': (43.6805, -71.5811), 'NJ': (40.1907, -74.6728),
    'NM': (34.4071, -106.1126), 'NY': (42.9538, -75.5268),
    'NC': (35.5557, -79.3877), 'ND': (47.4501, -100.4659),
    'OH': (40.2862, -82.7937), 'OK': (35.5889, -97.4943),
    'OR': (43.9336, -120.5583), 'PA': (40.8781, -77.7996),
    'RI': (41.6762, -71.5562), 'SC': (33.9169, -80.8964),
    'SD': (44.4443, -100.2263), 'TN': (35.8580, -86.3505),
    'TX': (31.4757, -99.3312), 'UT': (39.3055, -111.6703),
    'VT': (44.0687, -72.6658), 'VA': (37.5215, -78.8537),
    'WA': (47.3826, -120.4472), 'WV': (38.6409, -80.6227),
    'WI': (44.6243, -89.9941), 'WY': (42.9957, -107.5512)
}
# STEP 0: COMBINE MULTIPLE CSVs FROM ZIP
def combine_csv_from_zip(zip_file_path):
    """
    Read all CSV files from a zip file and combine them into a single DataFrame
    """
    # Create an empty list to store individual DataFrames
    dfs = []

    try:
        # Open the zip file
        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
            # List all files in the zip
            file_list = zip_ref.namelist()

            # Filter for CSV files
            csv_files = [f for f in file_list if f.lower().endswith('.csv')]

            print(f"Found {len(csv_files)} CSV files in the zip archive")

            # Read each CSV file
            for csv_file in csv_files:
                try:
                    # Read the CSV directly from the zip file
                    with zip_ref.open(csv_file) as f:
                        print(f"Reading file: {csv_file}")
                        df = pd.read_csv(f)
                        # Add source file name as a column (optional)
                        df['source_file'] = csv_file
                        dfs.append(df)
                except Exception as e:
                    print(f"Error reading {csv_file}: {str(e)}")
                    continue

            # Combine all DataFrames
            if dfs:
                combined_df = pd.concat(dfs, ignore_index=True)
                print(f"\nSuccessfully combined {len(dfs)} CSV files")
                print(f"Total number of rows: {len(combined_df)}")
                return combined_df
            else:
                raise ValueError("No valid CSV files were found in the zip archive")

    except Exception as e:
        print(f"Error processing zip file: {str(e)}")
        return None

# STEP 1: CLEANING & PREPROCESSING
def clean_data(df):
    # Standard column names
    df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

    # Convert dates
    date_columns = ['purchasedate', 'centralprocessingdate', 'settlementdate']
    for col in date_columns:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')

    # Handle missing or invalid amounts
    df = df[df['amount'].notna()]
    df['amount'] = pd.to_numeric(df['amount'], errors='coerce')
    df = df[df['amount'].notnull()]

    return df

def create_features(df):
    # Previous features
    # Time-based features
    df['hour_of_day'] = df['purchasedate'].dt.hour
    df['day_of_week'] = df['purchasedate'].dt.dayofweek
    df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)
    df['is_night'] = ((df['hour_of_day'] >= 23) | (df['hour_of_day'] <= 4)).astype(int)

    # Transaction patterns
    df['is_foreign_currency'] = df['currency'].apply(lambda x: 1 if str(x) != '840' else 0)
    df['is_foreign_merchant'] = df['merchantcountry'].apply(lambda x: 1 if str(x).strip() != 'US' else 0)
    df['has_intfee'] = (df['intfee'] > 0).astype(int)
    df['has_surcharge'] = (df['surchargeamount'] > 0).astype(int)

    # Card-level statistics (per day to detect sudden changes)
    df['date'] = df['purchasedate'].dt.date
    card_daily_stats = df.groupby(['pan', 'date']).agg({
        'amount': ['count', 'sum', 'mean', 'std'],
        'merchantcountry': 'nunique'
    }).reset_index()
    card_daily_stats.columns = ['pan', 'date', 'daily_tx_count', 'daily_total_amount',
                               'daily_avg_amount', 'daily_std_amount', 'daily_country_count']

    # Merge daily stats
    df = df.merge(card_daily_stats, on=['pan', 'date'], how='left')

    # Calculate velocity checks - Flags for abnormally high transaction frequency and multiple countries in a single day
    df['high_velocity'] = (df['daily_tx_count'] > df['daily_tx_count'].mean() + 2*df['daily_tx_count'].std()).astype(int)
    df['multiple_countries'] = (df['daily_country_count'] > 1).astype(int)

    # Amount-based risk factors
    df['is_round_amount'] = (df['amount'] % 1 == 0).astype(int)
    df['is_high_amount'] = (df['amount'] > df['daily_avg_amount'] + 2*df['daily_std_amount']).astype(int)
    df['is_refund'] = (df['amount'] < 0).astype(int)

    # Time pattern anomalies
    df['processing_delay'] = (df['centralprocessingdate'] - df['purchasedate']).dt.total_seconds() / 3600
    df['unusual_time'] = ((df['is_night'] == 1) & (df['amount'] > df['daily_avg_amount'])).astype(int)

    # Add state-based features
    if 'merchantstate' in df.columns:
        # Count transactions per state
        state_tx_counts = df.groupby('merchantstate')['amount'].count()
        high_risk_states = state_tx_counts[state_tx_counts > state_tx_counts.mean() + state_tx_counts.std()].index
        df['is_high_risk_state'] = df['merchantstate'].isin(high_risk_states).astype(int)

        # State-level transaction statistics
        state_stats = df.groupby('merchantstate').agg({
            'amount': ['mean', 'std']
        }).reset_index()
        state_stats.columns = ['merchantstate', 'state_avg_amount', 'state_std_amount']
        df = df.merge(state_stats, on='merchantstate', how='left')

        # Flag unusual amounts for the state
        df['is_unusual_for_state'] = (
            (df['amount'] > df['state_avg_amount'] + 2*df['state_std_amount']) |
            (df['amount'] < df['state_avg_amount'] - 2*df['state_std_amount'])
        ).astype(int)

    return df

# STEP 3: RISK SCORING
def calculate_risk_score(row):
    risk_score = 0

    # High-risk indicators
    if row['is_refund'] and row['amount'] < -1000:  # Large refunds
        risk_score += 30
    if row['high_velocity']:  # Unusual number of transactions
        risk_score += 20
    if row['multiple_countries']:  # Transactions in multiple countries same day
        risk_score += 25
    if row['is_foreign_merchant'] and row['is_high_amount']:  # High-value foreign transactions
        risk_score += 25
    if row['unusual_time']:  # Unusual hour with high amount
        risk_score += 15
    if row['processing_delay'] > 48:  # Unusual processing delay
        risk_score += 10

    # Medium-risk indicators
    if row['is_foreign_currency']:
        risk_score += 10
    if row['is_high_amount']:
        risk_score += 15
    if row['is_night']:
        risk_score += 5

    # Transaction pattern indicators
    if row['daily_tx_count'] > 10:  # Unusually high number of transactions
        risk_score += 15

    return risk_score

# STEP 4: FRAUD DETECTION
def detect_fraud(df):
    # Calculate basic risk score
    df['risk_score'] = df.apply(calculate_risk_score, axis=1)

    # Select features for Isolation Forest
    features = [
        'amount', 'is_foreign_currency', 'is_foreign_merchant',
        'is_weekend', 'is_night', 'has_intfee', 'has_surcharge',
        'daily_tx_count', 'daily_total_amount', 'processing_delay',
        'risk_score', 'high_velocity', 'multiple_countries',
        'is_high_amount', 'unusual_time'
    ]

    # Remove rows with missing values
    df_clean = df.dropna(subset=features)

    # Scale features
    scaler = StandardScaler()
    X = scaler.fit_transform(df_clean[features])

    # Train Isolation Forest with stricter parameters
    clf = IsolationForest(
        contamination=0.005,
        max_samples='auto',
        n_estimators=300,
        random_state=42
    )

    # Predict and add fraud scores
    df_clean['isolation_forest_score'] = clf.fit_predict(X)
    df_clean['anomaly_score'] = clf.score_samples(X)

    # Combine risk score with isolation forest results
    df_clean['fraud_probability'] = (0.5 - (df_clean['anomaly_score'] / (2 * abs(df_clean['anomaly_score'].min()))))

    # Final fraud detection using combined approach
    df_clean['is_fraud'] = 0

    # Mark as fraud if meets either condition:
    # 1. High risk score AND flagged by Isolation Forest
    # 2. Very high risk score regardless of Isolation Forest
    df_clean.loc[(df_clean['risk_score'] >= 50) & (df_clean['isolation_forest_score'] == -1), 'is_fraud'] = 1
    df_clean.loc[df_clean['risk_score'] >= 75, 'is_fraud'] = 1

    return df_clean

# STEP 5: TRANSACTION ANALYSIS
def analyze_suspicious_transactions(df):
    suspicious = df[df['is_fraud'] == 1].copy()

    # Add reason codes for flagging
    def get_fraud_reasons(row):
        reasons = []
        if row['is_refund'] and row['amount'] < -1000:
            reasons.append("Large refund")
        if row['high_velocity']:
            reasons.append("Unusual transaction velocity")
        if row['multiple_countries']:
            reasons.append("Multiple countries same day")
        if row['is_foreign_merchant'] and row['is_high_amount']:
            reasons.append("High-value foreign transaction")
        if row['unusual_time']:
            reasons.append("Unusual hour with high amount")
        if row['processing_delay'] > 48:
            reasons.append("Unusual processing delay")
        if row['risk_score'] >= 75:
            reasons.append("Very high risk score")
        return " | ".join(reasons)

    suspicious['fraud_reasons'] = suspicious.apply(get_fraud_reasons, axis=1)
    return suspicious

def geocode_merchant_locations(fraud_df):
    """
    Use MerchantState for location mapping instead of geocoding service
    """
    print("\nDebugging Merchant Locations:")
    print(f"Total fraud transactions: {len(fraud_df)}")

    df = fraud_df.copy()

    # Clean the merchantstate data by stripping whitespace
    df['merchantstate'] = df['merchantstate'].str.strip()

    print("\nUnique merchant states in fraud data (after cleaning):")
    print(df['merchantstate'].unique())

    df['lat'] = np.nan
    df['lon'] = np.nan

    # Map coordinates from state abbreviations
    mapped_count = 0
    for state, (lat, lon) in US_STATE_COORDS.items():
        mask = df['merchantstate'] == state
        matches = mask.sum()
        if matches > 0:
            print(f"Found {matches} transactions for state {state}")
            df.loc[mask, 'lat'] = lat
            df.loc[mask, 'lon'] = lon
            mapped_count += matches

    geocoded_df = df.dropna(subset=['lat', 'lon'])
    print(f"\nSuccessfully mapped {mapped_count} transactions to state coordinates")
    print(f"Final geocoded transactions: {len(geocoded_df)}")

    return geocoded_df

def create_fraud_map(fraud_df_with_coords):
    """
    Create an interactive map visualization of fraud locations with state-level clustering
    """
    print("\nDebugging Map Creation:")
    print(f"Received {len(fraud_df_with_coords)} geocoded transactions")

    # Initialize the map centered on US
    m = folium.Map(location=[39.8283, -98.5795], zoom_start=4)

    # Create state-level summary
    state_summary = fraud_df_with_coords.groupby('merchantstate').agg({
        'amount': ['count', 'sum', 'mean'],
        'risk_score': 'mean'
    }).reset_index()
    state_summary.columns = ['state', 'tx_count', 'total_amount', 'avg_amount', 'avg_risk_score']

    print("\nState Summary:")
    print(state_summary)


    # Create a feature group for circle markers
    marker_group = folium.FeatureGroup(name='Fraud Hotspots')

    marker_count = 0
    # Add markers for each state with fraud
    for _, row in state_summary.iterrows():
        state = row['state']
        if state in US_STATE_COORDS:
            marker_count += 1
            lat, lon = US_STATE_COORDS[state]

            popup_html = f"""
                <b>State:</b> {state}<br>
                <b>Fraud Transactions:</b> {int(row['tx_count'])}<br>
                <b>Total Amount:</b> ${row['total_amount']:,.2f}<br>
                <b>Average Amount:</b> ${row['avg_amount']:,.2f}<br>
                <b>Average Risk Score:</b> {row['avg_risk_score']:.1f}
            """

            # Create circle marker with more prominent styling
            folium.CircleMarker(
                location=[lat, lon],
                radius=np.sqrt(row['tx_count']) * 5,  # Increased size multiplier
                color='red',
                fill=True,
                fill_color='red',
                fill_opacity=0.7,
                weight=2,  # Increased border weight
                popup=folium.Popup(popup_html, max_width=300)
            ).add_to(marker_group)

    print(f"\nAdded {marker_count} markers to the map")

    # Add choropleth layer with reduced opacity
    choropleth = folium.Choropleth(
        geo_data='https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json',
        name='Fraud Density',
        data=state_summary,
        columns=['state', 'tx_count'],
        key_on='feature.id',
        fill_color='YlOrRd',
        fill_opacity=0.3,  # Reduced opacity
        line_opacity=0.2,
        legend_name='Number of Fraud Transactions'
    )

    # Add layers to map in correct order
    choropleth.add_to(m)
    marker_group.add_to(m)  # Add markers after choropleth so they're on top

    # Add layer control
    folium.LayerControl().add_to(m)

    # Add fullscreen option
    folium.plugins.Fullscreen().add_to(m)

    'return m._repr_html_()'
    return m

def evaluate_model(df):
    """
    Evaluate the fraud detection model performance
    """
    print("\nModel Evaluation Metrics:")

    # Calculate confusion matrix
    y_pred = df['is_fraud']
    y_true = (df['isolation_forest_score'] == -1)  # Isolation Forest predictions

    conf_matrix = confusion_matrix(y_true, y_pred)

    # Calculate and plot precision-recall curve
    precision, recall, _ = precision_recall_curve(y_true, df['fraud_probability'])
    pr_auc = auc(recall, precision)

    # Print classification report
    print("\nClassification Report:")
    print(classification_report(y_true, y_pred))

    # Plot confusion matrix
    plt.figure(figsize=(10, 4))

    plt.subplot(1, 2, 1)
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
    plt.title('Confusion Matrix')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')

    plt.subplot(1, 2, 2)
    plt.plot(recall, precision, label=f'PR curve (AUC = {pr_auc:.2f})')
    plt.xlabel('Recall')
    plt.ylabel('Precision')
    plt.title('Precision-Recall Curve')
    plt.legend()
    plt.tight_layout()
    plt.show()

    # Additional metrics
    print("\nDetailed Metrics:")
    print(f"PR-AUC Score: {pr_auc:.3f}")
    print(f"Detection Rate: {conf_matrix[1,1] / (conf_matrix[1,0] + conf_matrix[1,1]):.3f}")
    print(f"False Positive Rate: {conf_matrix[0,1] / (conf_matrix[0,0] + conf_matrix[0,1]):.3f}")

# Update main function
def main(zip_file_path):
    print("Reading and combining CSV files...")
    combined_df = combine_csv_from_zip(zip_file_path)

    if combined_df is None:
        print("Failed to process zip file")
        return None, None

    print("\nProcessing combined dataset...")
    df = clean_data(combined_df)
    df = create_features(df)
    df = detect_fraud(df)
    suspicious_transactions = analyze_suspicious_transactions(df)

    # Evaluate model
    evaluate_model(df)

    # Generate map visualization (new addition)
    print("\nGenerating fraud location map...")
    geocoded_fraud_df = geocode_merchant_locations(suspicious_transactions)
    fraud_map = create_fraud_map(geocoded_fraud_df)

    # Display the map (new addition)
    fraud_map.save('fraud_map.html')
    print("\nFraud map has been saved as 'fraud_map.html'. You can open it in a web browser to view the interactive visualization.")

    return df, suspicious_transactions

# Run the analysis
zip_file_path = "/content/vss_apr.zip"
df, suspicious_transactions = main(zip_file_path)

if df is not None:
    # Display summary
    print("\nFraud Detection Summary:")
    print(f"Total Transactions: {len(df)}")
    print(f"Flagged as Suspicious: {len(suspicious_transactions)}")
    print(f"Fraud Rate: {(len(suspicious_transactions) / len(df)) * 100:.2f}%")

    # Display suspicious transactions with reasons
    print("\nDetailed Suspicious Transactions:")
    columns_to_show = ['source_file', 'purchasedate', 'amount', 'merchant',
                       'merchantcountry', 'risk_score', 'fraud_probability',
                       'fraud_reasons']
    pd.set_option('display.max_columns', None)
    pd.set_option('display.max_colwidth', None)
    print(suspicious_transactions[columns_to_show])

    # Optional: Save results to CSV
    suspicious_transactions[columns_to_show].to_csv('suspicious_transactions.csv', index=False)
    print("\nSuspicious transactions have been saved to 'suspicious_transactions.csv'")



from google.colab import files
files.download("/content/fraud_map.html")

!pip install dash dash-daq

"""winf"""

!pip install dash dash-daq pandas



import dash
from dash import dcc, html
import dash_daq as daq
import pandas as pd

# Load Data
df = pd.read_csv("suspicious_transactions.csv")
fraud_map_html = "fraud_map.html"

# KPIs
total_fraud_amount = df["amount"].sum()
total_fraud_count = len(df)
avg_risk_score = df["risk_score"].mean()

# --- DYNAMIC AI INSIGHTS ---
def get_dynamic_insights(df):
    # 1. Most common fraud reason
    top_reason = df['fraud_reasons'].value_counts().idxmax() if 'fraud_reasons' in df.columns and not df.empty else "N/A"
    # 2. State with most frauds (robust to missing column)
    if any(col in df.columns for col in ['merchantstate', 'merchant_state']):
        state_col = 'merchantstate' if 'merchantstate' in df.columns else 'merchant_state'
        if not df.empty and df[state_col].notnull().any():
            top_state = df[state_col].value_counts().idxmax()
            top_state_count = df[state_col].value_counts().max()
            top_state_str = f"{top_state} ({top_state_count} cases)"
        else:
            top_state_str = "N/A"
    else:
        top_state_str = "N/A"
    # 3. Highest risk score transaction
    if 'risk_score' in df.columns and not df.empty:
        top_tx = df.loc[df['risk_score'].idxmax()]
        merchant = top_tx['merchant'] if 'merchant' in df.columns else "Unknown Merchant"
        state = top_tx[state_col] if 'state_col' in locals() and state_col in top_tx else "N/A"
        top_tx_desc = f"{merchant} ({state}) - Score: {top_tx['risk_score']}"
    else:
        top_tx_desc = "N/A"
    return [
        {
            "icon": "fas fa-exclamation-triangle",
            "title": "Most Common Fraud Trigger",
            "desc": top_reason
        },
        {
            "icon": "fas fa-map-marker-alt",
            "title": "Fraud Hotspot",
            "desc": top_state_str
        },
        {
            "icon": "fas fa-bolt",
            "title": "Highest Risk Transaction",
            "desc": top_tx_desc
        }
    ]

ai_insights = get_dynamic_insights(df)

# --- MULTI-SHADED LIGHT COLOR SCHEME ---
colors = {
    'background': 'linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%)',
    'card_bg': 'linear-gradient(135deg, #e0eafc 0%, #cfdef3 100%)',
    'card_bg2': 'linear-gradient(135deg, #f9f6ff 0%, #e0c3fc 100%)',
    'card_bg3': 'linear-gradient(135deg, #f6d365 0%, #fda085 100%)',
    'text': '#22223b',
    'accent1': '#56ccf2',
    'accent2': '#43e97b',
    'accent3': '#f7971e',
    'accent4': '#a1c4fd',
    'accent5': '#c2e9fb'
}

app = dash.Dash(__name__)
server = app.server
app.title = "FinGuard Pro Analytics"

app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>{%title%}</title>
        {%favicon%}
        {%css%}
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            body {
                background: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%) !important;
            }
            .card-container {
                perspective: 1000px;
                margin: 15px;
                width: 22%;
                min-width: 250px;
                max-width: 300px;
                flex: 1 1 22%;
            }
            .credit-card {
                transition: transform 0.6s;
                transform-style: preserve-3d;
                position: relative;
                min-height: 200px;
            }
            .credit-card:hover {
                transform: rotateY(180deg);
            }
            .kpi-box {
                animation: float 6s ease-in-out infinite;
            }
            .gradient-text {
                background: linear-gradient(45deg, #56ccf2, #43e97b);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }
            .insights-section {
                background: linear-gradient(135deg, #e0eafc 0%, #cfdef3 100%);
                border-radius: 18px;
                padding: 32px 24px;
                margin-top: 48px;
                margin-bottom: 32px;
                box-shadow: 0 8px 32px rgba(86,204,242,0.08);
            }
            .insights-title {
                font-size: 2rem;
                font-weight: 600;
                color: #56ccf2;
                margin-bottom: 18px;
                display: flex;
                align-items: center;
                gap: 12px;
            }
            .insights-cards {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                justify-content: space-between;
            }
            .insight-card {
                background: linear-gradient(135deg, #f9f6ff 0%, #e0c3fc 100%);
                border-radius: 14px;
                padding: 22px 18px;
                flex: 1 1 30%;
                min-width: 210px;
                max-width: 340px;
                box-shadow: 0 4px 16px rgba(161,196,253,0.10);
                display: flex;
                flex-direction: column;
                align-items: flex-start;
                min-height: 110px;
            }
            .insight-icon {
                font-size: 1.8em;
                margin-bottom: 8px;
                color: #56ccf2;
            }
            .insight-title {
                font-size: 1.1em;
                font-weight: 600;
                color: #22223b;
                margin-bottom: 6px;
            }
            .insight-desc {
                color: #4a4e69;
                font-size: 1em;
            }
            @media (max-width: 1200px) {
                .card-container { width: 45%; }
            }
            @media (max-width: 800px) {
                .card-container { width: 95%; }
                .insights-cards { flex-direction: column; }
            }
        </style>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

app.layout = html.Div(style={
    "background": colors['background'],
    "fontFamily": "Poppins, sans-serif",
    "padding": "20px",
    "minHeight": "100vh"
}, children=[
    # Header
    html.Div([
        html.I(className="fas fa-shield-alt fa-3x", style={"color": colors['accent1']}),
        html.H1("FinGuard Pro Analytics", className="gradient-text", style={
            "fontSize": "48px",
            "fontWeight": "bold",
            "textAlign": "center",
            "marginBottom": "40px",
            "textShadow": "2px 2px 4px rgba(0,0,0,0.12)"
        })
    ], style={"textAlign": "center"}),

    # KPIs
    html.Div(style={
        "display": "flex",
        "justifyContent": "space-around",
        "marginBottom": "40px",
        "gap": "24px"
    }, children=[
        html.Div([
            html.I(className="fas fa-money-bill-wave fa-3x", style={"color": colors['accent1'], "marginBottom": "10px"}),
            daq.LEDDisplay(
                label="Total Fraud ($)",
                value=f"{total_fraud_amount:,.2f}",
                backgroundColor="#fff",
                color=colors['accent1'],
                size=50
            )
        ], className="kpi-box", style={
            "background": colors['card_bg'],
            "padding": "30px",
            "borderRadius": "20px",
            "boxShadow": "0 10px 20px rgba(86,204,242,0.08)",
            "width": "30%"
        }),

        html.Div([
            html.I(className="fas fa-chart-line fa-3x", style={"color": colors['accent2'], "marginBottom": "10px"}),
            daq.LEDDisplay(
                label="Suspicious Transactions",
                value=str(total_fraud_count),  # Always a string, no formatting!
                backgroundColor="#fff",
                color=colors['accent2'],
                size=50
            )
        ], className="kpi-box", style={
            "background": colors['card_bg2'],
            "padding": "30px",
            "borderRadius": "20px",
            "boxShadow": "0 10px 20px rgba(67,170,139,0.08)",
            "width": "30%"
        }),

        html.Div([
            html.I(className="fas fa-user-shield fa-3x", style={"color": colors['accent3'], "marginBottom": "10px"}),
            daq.LEDDisplay(
                label="Avg. Risk Score",
                value=f"{avg_risk_score:.2f}",
                backgroundColor="#fff",
                color=colors['accent3'],
                size=50
            )
        ], className="kpi-box", style={
            "background": colors['card_bg3'],
            "padding": "30px",
            "borderRadius": "20px",
            "boxShadow": "0 10px 20px rgba(255,190,11,0.10)",
            "width": "30%"
        })
    ]),

    # Alert Banner
    html.Div([
        html.I(className="fas fa-bell fa-lg", style={"marginRight": "10px"}),
        "ALERT: Unusual Activity Detected"
    ], style={
        "background": "linear-gradient(45deg, #56ccf2, #f7971e)",
        "color": colors['text'],
        "padding": "20px",
        "borderRadius": "15px",
        "textAlign": "center",
        "fontWeight": "bold",
        "marginBottom": "30px",
        "boxShadow": "0 5px 15px rgba(255, 107, 107, 0.08)",
        "animation": "pulse 2s infinite"
    }),

    # Fraud Map
    html.Div([
        html.H3([
            html.I(className="fas fa-globe fa-lg", style={"marginRight": "10px"}),
            "Global Fraud Activity"
        ], style={"color": colors['text'], "marginBottom": "20px"}),
        html.Div(html.Iframe(
            srcDoc=open(fraud_map_html, 'r').read(),
            width="100%",
            height="500"
        ), style={
            "border": f"3px solid {colors['accent1']}",
            "borderRadius": "20px",
            "overflow": "hidden",
            "boxShadow": "0 10px 30px rgba(67,170,139,0.08)"
        })
    ]),

    # --- Recent Suspicious Transactions ---
    html.Div([
        html.H3([
            html.I(className="fas fa-credit-card fa-lg", style={"marginRight": "10px"}),
            "Recent Suspicious Transactions"
        ], style={"color": colors['text'], "marginTop": "40px"}),
        html.Div([
            html.Div([
                html.Div([
                    # Front of card
                    html.Div(style={
                        "background": f"linear-gradient(45deg, {colors['accent1']}, {colors['accent2']})",
                        "borderRadius": "15px",
                        "padding": "20px",
                        "height": "200px",
                        "position": "relative",
                        "backfaceVisibility": "hidden"
                    }, children=[
                        html.H4(f"${row['amount']:,.2f}", style={
                            "fontSize": "24px",
                            "color": "white",
                            "margin": "0"
                        }),
                        html.Div([
                            html.I(className="fas fa-building", style={"marginRight": "5px"}),
                            row['merchant']
                        ], style={"color": "white", "marginTop": "10px"}),
                        html.Div([
                            html.I(className="fas fa-globe", style={"marginRight": "5px"}),
                            row['merchantcountry']
                        ], style={"color": "white", "position": "absolute", "bottom": "20px"}),
                        html.Div([
                            html.I(className="fas fa-calendar", style={"marginRight": "5px"}),
                            row['purchasedate']
                        ], style={"color": "white", "position": "absolute", "bottom": "50px"})
                    ]),
                    # Back of card (shown on hover)
                    html.Div([
                        html.H4("Risk Details", style={"color": "white", "marginTop": "0"}),
                        html.Div([
                            html.I(className="fas fa-exclamation-circle", style={"marginRight": "5px"}),
                            f"Risk Score: {row['risk_score']}"
                        ], style={"color": "#FFD700", "marginBottom": "10px"}),
                        html.Div([
                            html.I(className="fas fa-info-circle", style={"marginRight": "5px"}),
                            f"Reason: {row['fraud_reasons']}"
                        ], style={"color": "white"})
                    ], style={
                        "background": f"linear-gradient(45deg, {colors['accent2']}, {colors['accent1']})",
                        "borderRadius": "15px",
                        "padding": "20px",
                        "height": "200px",
                        "position": "absolute",
                        "top": "0",
                        "left": "0",
                        "width": "100%",
                        "transform": "rotateY(180deg)",
                        "backfaceVisibility": "hidden"
                    })
                ], className="credit-card", style={"width": "100%", "height": "200px", "position": "relative"})
            ], className="card-container")
            for _, row in df.sort_values(by="risk_score", ascending=False).head(8).iterrows()
        ] if not df.empty else html.Div("No suspicious transactions detected.", style={"color": colors['accent1'], "fontSize": "1.2em", "padding": "30px"}), style={
            "display": "flex",
            "flexWrap": "wrap",
            "justifyContent": "space-between",
            "gap": "20px"
        })
    ]),

    # AI Risk Intelligence Insights Section (Dynamic, concise, visually appealing)
    html.Div([
        html.Div([
            html.I(className="fas fa-lightbulb", style={"marginRight": "12px"}),
            "AI Risk Intelligence Insights"
        ], className="insights-title"),
        html.Div([
            html.Div([
                html.I(className=insight["icon"] + " insight-icon"),
                html.Div(insight["title"], className="insight-title"),
                html.Div(insight["desc"], className="insight-desc"),
            ], className="insight-card")
            for insight in ai_insights
        ], className="insights-cards")
    ], className="insights-section")
])

if __name__ == '__main__':
    app.run(debug=True)



"""# Final Dashboard Code"""

import dash
from dash import dcc, html
import dash_daq as daq
import pandas as pd

# Load Data
df = pd.read_csv("suspicious_transactions.csv")
fraud_map_html = "fraud_map.html"

# KPIs
total_fraud_amount = df["amount"].sum()
total_fraud_count = len(df)
avg_risk_score = df["risk_score"].mean()

# --- DYNAMIC AI INSIGHTS ---
def get_dynamic_insights(df):
    # 1. Most common fraud reason
    top_reason = df['fraud_reasons'].value_counts().idxmax() if 'fraud_reasons' in df.columns and not df.empty else "N/A"
    # 2. State with most frauds (robust to missing column)
    if any(col in df.columns for col in ['merchantstate', 'merchant_state']):
        state_col = 'merchantstate' if 'merchantstate' in df.columns else 'merchant_state'
        if not df.empty and df[state_col].notnull().any():
            top_state = df[state_col].value_counts().idxmax()
            top_state_count = df[state_col].value_counts().max()
            top_state_str = f"{top_state} ({top_state_count} cases)"
        else:
            top_state_str = "N/A"
    else:
        top_state_str = "N/A"
    # 3. Highest risk score transaction
    if 'risk_score' in df.columns and not df.empty:
        top_tx = df.loc[df['risk_score'].idxmax()]
        merchant = top_tx['merchant'] if 'merchant' in df.columns else "Unknown Merchant"
        state = top_tx[state_col] if 'state_col' in locals() and state_col in top_tx else "N/A"
        top_tx_desc = f"{merchant} ({state}) - Score: {top_tx['risk_score']}"
    else:
        top_tx_desc = "N/A"
    return [
        {
            "icon": "fas fa-exclamation-triangle",
            "title": "Most Common Fraud Trigger",
            "desc": top_reason
        },
        {
            "icon": "fas fa-map-marker-alt",
            "title": "Fraud Hotspot",
            "desc": top_state_str
        },
        {
            "icon": "fas fa-bolt",
            "title": "Highest Risk Transaction",
            "desc": top_tx_desc
        }
    ]

ai_insights = get_dynamic_insights(df)

# --- COLOR SCHEME ---
colors = {
    'background': 'linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%)',
    'card_bg': 'linear-gradient(135deg, #e0eafc 0%, #cfdef3 100%)',
    'card_bg2': 'linear-gradient(135deg, #f9f6ff 0%, #e0c3fc 100%)',
    'card_bg3': 'linear-gradient(135deg, #f6d365 0%, #fda085 100%)',
    'text': '#22223b',
    'accent1': '#e94560',   # Pinkish red
    'accent2': '#4ECDC4',   # Turquoise
    'accent3': '#f7971e',
    'accent4': '#a1c4fd',
    'accent5': '#c2e9fb',
    'primary': '#4ECDC4',
    'secondary': '#a1c4fd',
    'success': '#43e97b',
    'accent': '#f7971e',
    'card': '#f5fcff'
}

app = dash.Dash(__name__)
server = app.server
app.title = "FinGuard Pro Analytics"

app.index_string = '''
<!DOCTYPE html>
<html>
    <head>
        {%metas%}
        <title>{%title%}</title>
        {%favicon%}
        {%css%}
        <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            body {
                background: linear-gradient(120deg, #fdfbfb 0%, #ebedee 100%) !important;
            }
            .card-container {
                perspective: 1000px;
                margin: 15px;
                width: 22%;
                min-width: 250px;
                max-width: 300px;
                flex: 1 1 22%;
            }
            .credit-card {
                transition: transform 0.6s;
                transform-style: preserve-3d;
                position: relative;
                min-height: 200px;
            }
            .credit-card:hover {
                transform: rotateY(180deg);
            }
            .kpi-box {
                animation: float 6s ease-in-out infinite;
            }
            .gradient-text {
                background: linear-gradient(45deg, #e94560, #4ECDC4);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }
            .insights-section {
                background: linear-gradient(135deg, #e0eafc 0%, #cfdef3 100%);
                border-radius: 18px;
                padding: 32px 24px;
                margin-top: 48px;
                margin-bottom: 32px;
                box-shadow: 0 8px 32px rgba(86,204,242,0.08);
            }
            .insights-title {
                font-size: 2rem;
                font-weight: 600;
                color: #e94560;
                margin-bottom: 18px;
                display: flex;
                align-items: center;
                gap: 12px;
            }
            .insights-cards {
                display: flex;
                flex-wrap: wrap;
                gap: 20px;
                justify-content: space-between;
            }
            .insight-card {
                background: linear-gradient(135deg, #f9f6ff 0%, #e0c3fc 100%);
                border-radius: 14px;
                padding: 22px 18px;
                flex: 1 1 30%;
                min-width: 210px;
                max-width: 340px;
                box-shadow: 0 4px 16px rgba(161,196,253,0.10);
                display: flex;
                flex-direction: column;
                align-items: flex-start;
                min-height: 110px;
            }
            .insight-icon {
                font-size: 1.8em;
                margin-bottom: 8px;
                color: #e94560;
            }
            .insight-title {
                font-size: 1.1em;
                font-weight: 600;
                color: #22223b;
                margin-bottom: 6px;
            }
            .insight-desc {
                color: #4a4e69;
                font-size: 1em;
            }
            @media (max-width: 1200px) {
                .card-container { width: 45%; }
            }
            @media (max-width: 800px) {
                .card-container { width: 95%; }
                .insights-cards { flex-direction: column; }
            }
        </style>
    </head>
    <body>
        {%app_entry%}
        <footer>
            {%config%}
            {%scripts%}
            {%renderer%}
        </footer>
    </body>
</html>
'''

app.layout = html.Div(style={
    "background": colors['background'],
    "fontFamily": "Poppins, sans-serif",
    "padding": "20px",
    "minHeight": "100vh"
}, children=[
    # Header
    html.Div([
        html.I(className="fas fa-shield-alt fa-3x", style={"color": colors['accent1']}),
        html.H1("FinGuard Pro Analytics", className="gradient-text", style={
            "fontSize": "48px",
            "fontWeight": "bold",
            "textAlign": "center",
            "marginBottom": "40px",
            "textShadow": "2px 2px 4px rgba(0,0,0,0.12)"
        })
    ], style={"textAlign": "center"}),

    # KPIs
    html.Div(style={
        "display": "flex",
        "justifyContent": "space-around",
        "marginBottom": "40px",
        "gap": "24px"
    }, children=[
        html.Div([
            html.I(className="fas fa-money-bill-wave fa-3x", style={"color": colors['accent1'], "marginBottom": "10px"}),
            daq.LEDDisplay(
                label="Total Fraud ($)",
                value=str(int(total_fraud_amount)) if total_fraud_amount == int(total_fraud_amount) else f"{total_fraud_amount:.2f}",
                backgroundColor="#fff",
                color=colors['accent1'],
                size=50
            )
        ], className="kpi-box", style={
            "background": colors['card_bg'],
            "padding": "30px",
            "borderRadius": "20px",
            "boxShadow": "0 10px 20px rgba(86,204,242,0.08)",
            "width": "30%"
        }),

        html.Div([
            html.I(className="fas fa-chart-line fa-3x", style={"color": colors['accent2'], "marginBottom": "10px"}),
            daq.LEDDisplay(
                label="Suspicious Transactions",
                value=str(total_fraud_count),
                backgroundColor="#fff",
                color=colors['accent2'],
                size=50
            )
        ], className="kpi-box", style={
            "background": colors['card_bg2'],
            "padding": "30px",
            "borderRadius": "20px",
            "boxShadow": "0 10px 20px rgba(67,170,139,0.08)",
            "width": "30%"
        }),

        html.Div([
            html.I(className="fas fa-user-shield fa-3x", style={"color": colors['accent3'], "marginBottom": "10px"}),
            daq.LEDDisplay(
                label="Avg. Risk Score",
                value=f"{avg_risk_score:.2f}",
                backgroundColor="#fff",
                color=colors['accent3'],
                size=50
            )
        ], className="kpi-box", style={
            "background": colors['card_bg3'],
            "padding": "30px",
            "borderRadius": "20px",
            "boxShadow": "0 10px 20px rgba(255,190,11,0.10)",
            "width": "30%"
        })
    ]),

    # Alert Banner
    html.Div([
        html.I(className="fas fa-bell fa-lg", style={"marginRight": "10px"}),
        "ALERT: Unusual Activity Detected"
    ], style={
        "background": "linear-gradient(45deg, #e94560, #f7971e)",
        "color": colors['text'],
        "padding": "20px",
        "borderRadius": "15px",
        "textAlign": "center",
        "fontWeight": "bold",
        "marginBottom": "30px",
        "boxShadow": "0 5px 15px rgba(255, 107, 107, 0.08)",
        "animation": "pulse 2s infinite"
    }),

    # Fraud Map
    html.Div([
        html.H3([
            html.I(className="fas fa-globe fa-lg", style={"marginRight": "10px"}),
            "Global Fraud Activity"
        ], style={"color": colors['text'], "marginBottom": "20px"}),
        html.Div(html.Iframe(
            srcDoc=open(fraud_map_html, 'r').read(),
            width="100%",
            height="500"
        ), style={
            "border": f"3px solid {colors['accent1']}",
            "borderRadius": "20px",
            "overflow": "hidden",
            "boxShadow": "0 10px 30px rgba(67,170,139,0.08)"
        })
    ]),

    # --- Recent Suspicious Transactions ---
    html.Div([
        html.H3([
            html.I(className="fas fa-credit-card fa-lg", style={"marginRight": "10px"}),
            "Recent Suspicious Transactions"
        ], style={"color": colors['text'], "marginTop": "40px"}),
        html.Div([
            html.Div([
                html.Div([
                    # Front of card
                    html.Div(style={
                        "background": "linear-gradient(45deg, #e94560, #4ECDC4)",
                        "borderRadius": "15px",
                        "padding": "20px",
                        "height": "200px",
                        "position": "relative",
                        "backfaceVisibility": "hidden"
                    }, children=[
                        html.H4(f"${row['amount']:,.2f}", style={
                            "fontSize": "24px",
                            "color": "white",
                            "margin": "0"
                        }),
                        html.Div([
                            html.I(className="fas fa-building", style={"marginRight": "5px"}),
                            row['merchant']
                        ], style={"color": "white", "marginTop": "10px"}),
                        html.Div([
                            html.I(className="fas fa-globe", style={"marginRight": "5px"}),
                            row['merchantcountry']
                        ], style={"color": "white", "position": "absolute", "bottom": "20px"}),
                        html.Div([
                            html.I(className="fas fa-calendar", style={"marginRight": "5px"}),
                            row['purchasedate']
                        ], style={"color": "white", "position": "absolute", "bottom": "50px"})
                    ]),
                    # Back of card (shown on hover)
                    html.Div([
                        html.H4("Risk Details", style={"color": "white", "marginTop": "0"}),
                        html.Div([
                            html.I(className="fas fa-exclamation-circle", style={"marginRight": "5px"}),
                            f"Risk Score: {row['risk_score']}"
                        ], style={"color": "#FFD700", "marginBottom": "10px"}),
                        html.Div([
                            html.I(className="fas fa-info-circle", style={"marginRight": "5px"}),
                            f"Reason: {row['fraud_reasons']}"
                        ], style={"color": "white"})
                    ], style={
                        "background": "linear-gradient(45deg, #4ECDC4, #e94560)",
                        "borderRadius": "15px",
                        "padding": "20px",
                        "height": "200px",
                        "position": "absolute",
                        "top": "0",
                        "left": "0",
                        "width": "100%",
                        "transform": "rotateY(180deg)",
                        "backfaceVisibility": "hidden"
                    })
                ], className="credit-card", style={"width": "100%", "height": "200px", "position": "relative"})
            ], className="card-container")
            for _, row in df.sort_values(by="risk_score", ascending=False).head(8).iterrows()
        ] if not df.empty else html.Div("No suspicious transactions detected.", style={"color": colors['accent1'], "fontSize": "1.2em", "padding": "30px"}), style={
            "display": "flex",
            "flexWrap": "wrap",
            "justifyContent": "space-between",
            "gap": "20px"
        })
    ]),

    # --- AI-Powered Risk Insights Section ---
    html.Div([
        html.H2('AI-Powered Risk Insights',
                style={'color': colors['text'], 'marginBottom': '25px', 'fontSize': '24px'}),
        html.Div([
            # Key Patterns Card
            html.Div([
                html.Div([
                    html.I(className='fas fa-brain', style={
                        'fontSize': '24px',
                        'color': colors['primary'],
                        'marginBottom': '15px'
                    }),
                    html.H3('Key Patterns Detected',
                           style={'color': colors['text'], 'margin': '0 0 20px 0'}),
                    html.Div([
                        html.Div([
                            html.I(className='fas fa-map-marker-alt',
                                  style={'color': colors['primary'], 'marginRight': '10px'}),
                            html.Span('High-risk states: ', style={'color': colors['secondary']}),
                            html.Strong('GA, FL', style={'color': colors['text']})
                        ], style={'marginBottom': '15px'}),
                        html.Div([
                            html.I(className='fas fa-clock',
                                  style={'color': colors['primary'], 'marginRight': '10px'}),
                            html.Span('Peak fraud time: ', style={'color': colors['secondary']}),
                            html.Strong('00:00', style={'color': colors['text']})
                        ], style={'marginBottom': '15px'}),
                        html.Div([
                            html.I(className='fas fa-dollar-sign',
                                  style={'color': colors['primary'], 'marginRight': '10px'}),
                            html.Span('Avg. suspicious transaction: ', style={'color': colors['secondary']}),
                            html.Strong('$11,267.98', style={'color': colors['text']})
                        ])
                    ])
                ], style={'padding': '25px'})
            ], style={
                'backgroundColor': colors['card'],
                'borderRadius': '12px',
                'boxShadow': '0 4px 6px rgba(0, 0, 0, 0.05)',
                'flex': '1',
                'marginRight': '20px'
            }),

            # Ethical AI Metrics Card
            html.Div([
                html.Div([
                    html.I(className='fas fa-shield-alt', style={
                        'fontSize': '24px',
                        'color': colors['success'],
                        'marginBottom': '15px'
                    }),
                    html.H3('Ethical AI Metrics',
                           style={'color': colors['text'], 'margin': '0 0 20px 0'}),
                    html.Div([
                        html.Div([
                            html.Div(style={'display': 'flex', 'justifyContent': 'space-between'}, children=[
                                html.Span('False Positive Rate', style={'color': colors['secondary']}),
                                html.Span('3.33%', style={'color': colors['text']})
                            ]),
                            html.Div(style={
                                'width': '100%',
                                'backgroundColor': '#EDF2F7',
                                'borderRadius': '4px',
                                'marginTop': '8px'
                            }, children=[
                                html.Div(style={
                                    'width': '3.33%',
                                    'height': '8px',
                                    'backgroundColor': colors['primary'],
                                    'borderRadius': '4px'
                                })
                            ])
                        ], style={'marginBottom': '15px'}),
                        html.Div([
                            html.Div(style={'display': 'flex', 'justifyContent': 'space-between'}, children=[
                                html.Span('Model Fairness', style={'color': colors['secondary']}),
                                html.Span('96%', style={'color': colors['text']})
                            ]),
                            html.Div(style={
                                'width': '100%',
                                'backgroundColor': '#EDF2F7',
                                'borderRadius': '4px',
                                'marginTop': '8px'
                            }, children=[
                                html.Div(style={
                                    'width': '96%',
                                    'height': '8px',
                                    'backgroundColor': colors['success'],
                                    'borderRadius': '4px'
                                })
                            ])
                        ], style={'marginBottom': '15px'}),
                        html.Div([
                            html.Div(style={'display': 'flex', 'justifyContent': 'space-between'}, children=[
                                html.Span('Decision Transparency', style={'color': colors['secondary']}),
                                html.Span('100%', style={'color': colors['text']})
                            ]),
                            html.Div(style={
                                'width': '100%',
                                'backgroundColor': '#EDF2F7',
                                'borderRadius': '4px',
                                'marginTop': '8px'
                            }, children=[
                                html.Div(style={
                                    'width': '100%',
                                    'height': '8px',
                                    'backgroundColor': colors['accent'],
                                    'borderRadius': '4px'
                                })
                            ])
                        ])
                    ])
                ], style={'padding': '25px'})
            ], style={
                'backgroundColor': colors['card'],
                'borderRadius': '12px',
                'boxShadow': '0 4px 6px rgba(0, 0, 0, 0.05)',
                'flex': '1'
            })
        ], style={
            'display': 'flex',
            'marginBottom': '30px'
        })
    ])
])

if __name__ == '__main__':
    app.run(debug=True)